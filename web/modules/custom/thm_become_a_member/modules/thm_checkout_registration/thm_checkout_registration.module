<?php

/**
 * @file
 * Contains thm_checkout_registration.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\user\Entity\User;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\InvokeCommand;

/**
 * Implements hook_help().
 */
function thm_checkout_registration_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the thm_checkout_registration module.
    case 'help.page.thm_checkout_registration':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Custom Commerce Checkout Pane for THM DA registration') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function thm_checkout_registration_theme($existing, $type, $theme, $path) {
  $tempStore = \Drupal::service('tempstore.private')->get('thm_jwt');
  $token = $tempStore->get('user_jwt');
  $build = [
    'thm_registration_info' => [
      'render element' => 'form'
    ],
    'thm_checkout_registration_complete' => [
      'render element' => 'form',
      'variables' => [
        'user_jwt_da' => $token
      ]
    ]
  ];
  return $build;
}

function isDigitalmakerPaymentForm($form, $formId) {
  return $formId === 'commerce_checkout_flow_thm_digitalmaker_checkout_flow'
    && $form['#step_id'] === 'payment_method';
}

/**
 * Implements hook_form_alter().
 *
 * @param $form array
 */
function thm_checkout_registration_form_alter(&$form, FormStateInterface $formState, $formId) {
  if (isDigitalmakerPaymentForm($form, $formId)) {
    $form['payment_information']['#weight'] = '-20';
    $form['match_registration_data'] = [
      '#type' => 'checkbox',
      '#weight' => '0',
      '#title' => t('Check if billing info matches registration info.'),
      '#ajax' => [
        'callback' => 'loadDataIntoBillingForm'
      ]
    ];
  }
}

function getAddressFields() {
  return [
    '.given-name', '.family-name', '.country-code', '.address-line1',
    '.address-line2', '.dependent-locality', '.sorting-code',
    '.organization', '.locality', '.administrative-area', '.postal-code'
  ];
}

function loadDataIntoBillingForm(&$form, FormStateInterface $formState) {
  $profile      = User::load(\Drupal::currentUser()->id());
  $checked      = $formState->getValue('match_registration_data');
  $ajaxResponse = new AjaxResponse();
  $formClasses  = getAddressFields();

  if ($checked) {
    $intlAddress = $profile->get('field_intl_address')->getValue()[0];

    foreach ($formClasses as $formClass) {
      $snakeCasedField = substr(str_replace('-', '_', $formClass), 1);
      $ajaxResponse->addCommand(new InvokeCommand(
        $formClass, 'val', [$intlAddress[$snakeCasedField]]
      ));
    }
    return $ajaxResponse;
  } else {
    foreach ($formClasses as $formClass) {
      $ajaxResponse->addCommand(new InvokeCommand($formClass, 'val', ['']));
    }
    return $ajaxResponse;
  }
}